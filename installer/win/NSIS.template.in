;--------------------------------
; SureFile installation script
;--------------------------------

;--------------------------------
; Header Files

  !include "MUI2.nsh"
  !include "nsDialogs.nsh"
  !include "LogicLib.nsh"
  !include "Sections.nsh"
  !include "WordFunc.nsh"
  !include "FileFunc.nsh"

;--------------------------------
; Defines

  !define VERSION "@CPACK_PACKAGE_VERSION@"
  !define VERSION_MAJOR "@CPACK_PACKAGE_VERSION_MAJOR@"
  !define VERSION_MINOR "@CPACK_PACKAGE_VERSION_MINOR@"
  !define VERSION_PATCH "@CPACK_PACKAGE_VERSION_PATCH@"
  !define INST_DIR "@CPACK_TEMPORARY_DIRECTORY@"
  !define REGISTRY_KEY @CPACK_PACKAGE_VENDOR@\@CPACK_PACKAGE_INSTALL_REGISTRY_KEY@

  @CPACK_NSIS_DEFINES@

;--------------------------------
; Installation types
  @CPACK_NSIS_INSTALLATION_TYPES@

;--------------------------------
; Component sections
  @CPACK_NSIS_COMPONENT_SECTIONS@

;--------------------------------
; Configuration

  Name "@CPACK_NSIS_PACKAGE_NAME@"
  Caption "SureFile ${VERSION} Setup"

  OutFile "@CPACK_TOPLEVEL_DIRECTORY@/@CPACK_OUTPUT_FILE_NAME@"

  SetCompressor @CPACK_NSIS_COMPRESSOR@

  InstallDir "@CPACK_NSIS_INSTALL_ROOT@\@CPACK_PACKAGE_INSTALL_DIRECTORY@"

  RequestExecutionLevel admin

;--------------------------------
; Variables

  Var MUI_TEMP
  Var START_MENU
  Var STARTMENU_FOLDER
  Var INSTALL_DESKTOP
  Var PREVIOUS_INSTALL_DIRECTORY
  Var PREVIOUS_VERSION
  Var PREVIOUS_VERSION_STATUS
  Var ALL_USERS_DEFAULT
  Var ALL_USERS
  Var REINSTALL_STATE
  Var REINSTALL_UNINSTALL
  Var IS_ADMIN
  Var USER_NAME

  Var un.REMOVE_ALL_USERS
  Var un.REMOVE_CURRENT_USER

;--------------------------------
; Pages

  @CPACK_NSIS_INSTALLER_MUI_ICON_CODE@
  @CPACK_NSIS_INSTALLER_ICON_CODE@
  @CPACK_NSIS_INSTALLER_MUI_COMPONENTS_DESC@
  @CPACK_NSIS_INSTALLER_MUI_FINISHPAGE_RUN_CODE@

  !define MUI_ABORTWARNING
  !define MUI_HEADERIMAGE
  !define MUI_HEADERIMAGE_LEFT
  @CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS@
  ;${VERSION}
  !define MUI_WELCOMEPAGE_TITLE "Welcome to SureFile Setup Wizard"
  !define MUI_WELCOMEPAGE_TEXT "The Setup Wizard will install SureFile on your computer. Click next to continue or cancel to exit the Setup Wizard."
  !insertmacro MUI_PAGE_WELCOME
  !insertmacro MUI_PAGE_LICENSE "@CPACK_RESOURCE_FILE_LICENSE@"
  !define MUI_PAGE_CUSTOMFUNCTION_SHOW PreInstallPage
  !define MUI_PAGE_CUSTOMFUNCTION_LEAVE PostInstallPage
  !insertmacro MUI_PAGE_INSTFILES
  !define MUI_FINISHPAGE_LINK "Visit http://maidsafe.net"
  !define MUI_FINISHPAGE_LINK_LOCATION "http://maidsafe.net"
  !define MUI_FINISHPAGE_RUN "$INSTDIR\@CPACK_NSIS_INSTALLED_ICON_NAME@"
  !insertmacro MUI_PAGE_FINISH
  !insertmacro MUI_UNPAGE_CONFIRM
  !insertmacro MUI_UNPAGE_INSTFILES

;--------------------------------
; Languages

  !insertmacro MUI_LANGUAGE "English"

;--------------------------------
; Macros

  !insertmacro VersionCompare

;--------------------------------
; Version Information
  
  VIProductVersion "${VERSION}.0"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "ProductName" "@CPACK_NSIS_PACKAGE_NAME@"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "Comments" "@CPACK_NSIS_PACKAGE_NAME@"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "CompanyName" "@CPACK_PACKAGE_VENDOR@"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "LegalTrademarks" "@CPACK_PACKAGE_VENDOR@"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "LegalCopyright" "Copyright (C) maidsafe.net limited 2012"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "FileDescription" "@CPACK_NSIS_PACKAGE_NAME@ Installer"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "FileVersion" "${VERSION}"

;--------------------------------
; Functions

Function GetUserInfo

  ClearErrors
  UserInfo::GetName
  ${If} ${Errors}
    StrCpy $IS_ADMIN 1
    Return
  ${EndIf}

  Pop $USER_NAME
  UserInfo::GetAccountType
  Pop $R0
  ${Switch} $R0
    ${Case} "Admin"
    ${Case} "Power"
      StrCpy $IS_ADMIN 1
      ${Break}
    ${Default}
      StrCpy $IS_ADMIN 0
      ${Break}
  ${EndSwitch}

FunctionEnd

Function CheckPreviousInstallDirectoryExists

  ${If} $PREVIOUS_INSTALL_DIRECTORY != ""
    ; Make sure directory is valid
    Push $R0
    Push $R1
    StrCpy $R0 "$PREVIOUS_INSTALL_DIRECTORY" "" -1
    ${If} $R0 == '\'
    ${OrIf} $R0 == '/'
      StrCpy $R0 $PREVIOUS_INSTALL_DIRECTORY*.*
    ${Else}
      StrCpy $R0 $PREVIOUS_INSTALL_DIRECTORY\*.*
    ${EndIf}
    ${IfNot} ${FileExists} $R0
      StrCpy $PREVIOUS_INSTALL_DIRECTORY ""
    ${EndIf}
    Pop $R1
    Pop $R0
  ${EndIf}

FunctionEnd

Function ReadPreviousVersion

  ReadRegStr $PREVIOUS_INSTALL_DIRECTORY SHCTX "Software\${REGISTRY_KEY}" ""
  Call CheckPreviousInstallDirectoryExists
  ${If} $PREVIOUS_INSTALL_DIRECTORY != ""
    ReadRegStr $PREVIOUS_VERSION SHCTX "Software\${REGISTRY_KEY}" "Version"
  ${EndIf}

FunctionEnd

Function CompareVersion

  Push $1
  Push $2
  Push $3

  ReadRegStr $1 SHCTX "Software\${REGISTRY_KEY}" "VersionMajor"
  ReadRegStr $2 SHCTX "Software\${REGISTRY_KEY}" "VersionMinor"
  ReadRegStr $3 SHCTX "Software\${REGISTRY_KEY}" "VersionPatch"

  ${If} $1 == ""
    Goto finish
  ${Else}
    ${If} $2 == ""
      Goto finish
    ${Else}
      ${If} $3 == ""
        Goto finish
      ${EndIf}
    ${EndIf}
  ${EndIf}

  ; PREVIOUS_VERSION_STATUS - 0 same, 1 older, 2 newer
  ${If} $1 == "${VERSION_MAJOR}"
    ${If} $2 == "${VERSION_MINOR}"
      ${If} $3 == "${VERSION_PATCH}"
        StrCpy $PREVIOUS_VERSION_STATUS 0
      ${Else}
        ${If} $3 < "${VERSION_PATCH}"
          StrCpy $PREVIOUS_VERSION_STATUS 1
        ${Else}
          StrCpy $PREVIOUS_VERSION_STATUS 2
        ${EndIf}
      ${EndIf}
    ${Else}
      ${If} $2 < "${VERSION_MINOR}"
        StrCpy $PREVIOUS_VERSION_STATUS 1
      ${Else}
        StrCpy $PREVIOUS_VERSION_STATUS 2
      ${EndIf}
    ${EndIf}
  ${Else}
    ${If} $1 < "${VERSION_MAJOR}"
      StrCpy $PREVIOUS_VERSION_STATUS 1
    ${Else}
      StrCpy $PREVIOUS_VERSION_STATUS 2
    ${EndIf}
  ${EndIf}

  finish:

  Pop $3
  Pop $2
  Pop $1

FunctionEnd

; Returns number of processes * 4 on top of stack, array with all processes right below it.
; Array should be cleared using System::Free
Function EnumProcesses

  ; Is this really necesssary for $Rx?
  Push $R1
  Push $R0
  Push $R2
  Push $R3

  ; Double size of array each time EnumProcesses fills it completely so that we do get all processes

  StrCpy $R1 1024

 enum_processes_loop:

  System::Alloc $R1

  Pop $R0

  System::Call "psapi::EnumProcesses(i R0, i R1, *i .R2) i .R3"

  ${If} $R3 == 0
    ; EnumProcesses failed, how can that be? :P
    goto enum_processes_fail
  ${EndIf}

  ${If} $R1 == $R2

    ; Too small buffer. Retry with twice the size

    Intop $R1 $R1 * 2
    System::Free $R0

    goto enum_processes_loop

  ${EndIf}

  StrCpy $R1 $R2

  ; Restore registers and put results on stack
  Pop $R3
  Pop $R2
  Exch $R0
  Exch
  Exch $R1
  return

 enum_processes_fail:

  Pop $R3
  Pop $R2
  Pop $R0
  Pop $R1

  Push 0
  Push 0

FunctionEnd

; Expects process ID on top of stack, returns filename (in device syntax) on top of stack
Function GetFilenameFromProcessId

  Exch $R0
  Push $R1
  Push $R2

  !ifndef PROCESS_QUERY_INFORMATION
  !define PROCESS_QUERY_INFORMATION 0x0400
  !endif
  System::Call "kernel32::OpenProcess(i ${PROCESS_QUERY_INFORMATION}, i 0, i $R0) i .R0"

  ${If} $R0 == 0

    Pop $R2
    Pop $R1
    Pop $R0
    Push ''
    return

  ${EndIf}

  System::Call "psapi::GetProcessImageFileName(i R0, t .R1, i ${NSIS_MAX_STRLEN}) i .R2"

  ${If} $R2 == 0

    System::Call "kernel32::CloseHandle(i R0)"
    Pop $R2
    Pop $R1
    Pop $R0
    Push ''

    return

  ${EndIf}

  System::Call "kernel32::CloseHandle(i R0)"

  Pop $R2
  StrCpy $R0 $R1
  Pop $R1
  Exch $R0

FunctionEnd

; Expects process name on top of stack.
; Gets replaced with 1 if process is running, 0 if it is not
Function IsProcessRunning

  Exch $R0 ; Name

  Push $R1 ; Bytes
  Push $R2 ; Array
  Push $R3 ; Counter
  Push $R4 ; Strlen
  Push $R5 ; Current process ID and image filename

  StrCpy $R0 "\$R0"

  StrLen $R4 $R0
  IntOp $R4 0 - $R4

  Call EnumProcesses

  Pop $R1
  Pop $R2

  StrCpy $R3 0

  ${While} $R3 < $R1

    IntOp $R5 $R2 + $R3

    System::Call "*$R5(i .R5)"
    Push $R5

    Call GetFilenameFromProcessId

    Pop $R5

    ; Get last part of filename
    StrCpy $R5 $R5 '' $R4

    ${If} $R5 == $R0

      ; Program is running
      Pop $R5
      Pop $R4
      Pop $R3
      Pop $R2
      Pop $R1
      Pop $R0
      Push 1
      return

    ${EndIf}

    IntOp $R3 $R3 + 4

  ${EndWhile}

  Pop $R5
  Pop $R4
  Pop $R3
  Pop $R2
  Pop $R1
  Pop $R0
  Push 0

FunctionEnd

Function CheckIfRunning

  Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
  Call IsProcessRunning
  Pop $R1

  ${If} $REINSTALL_UNINSTALL == 1
    StrCpy $R0 10
  ${Else}
    StrCpy $R0 2
  ${EndIf}

  ${While} $R1 == 1

    ${If} $R0 == 0

      ${ExitWhile}

    ${EndIf}

    Sleep 500

    Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
    Call IsProcessRunning
    Pop $R1

    IntOp $R0 $R0 - 1

  ${EndWhile}

  Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
  Call IsProcessRunning
  Pop $R1

  ${While} $R1 == 1

    MessageBox MB_RETRYCANCEL|MB_USERICON|MB_DEFBUTTON1 "SureFile appears to be running. Please close all running instances of SureFile before continuing the installation." IDCANCEL cancel IDRETRY retry
    retry:
    Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
    Call IsProcessRunning
    Pop $R1

  ${EndWhile}

  Return

  cancel:
    Quit

FunctionEnd

Function PreInstallPage

FunctionEnd

Function PostInstallPage

  ; Don't advance automatically if details expanded
  FindWindow $R0 "#32770" "" $HWNDPARENT
  GetDlgItem $R0 $R0 1016
  System::Call user32::IsWindowVisible(i$R0)i.s
  Pop $R0

  StrCmp $R0 0 +2
  SetAutoClose false

FunctionEnd

Function ConditionalAddToRegisty
  Pop $0
  Pop $1
  StrCmp "$0" "" EmptyString
    WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_NAME@" "$1" "$0"
    DetailPrint "Set install registry entry: '$1' to '$0'"
  EmptyString:
FunctionEnd

;--------------------------------

!ifdef CPACK_USES_DOWNLOAD
Function DownloadFile
    IfFileExists $INSTDIR\* +2
    CreateDirectory $INSTDIR
    Pop $0

    ; Skip if already downloaded
    IfFileExists $INSTDIR\$0 0 +2
    Return

    StrCpy $1 "@CPACK_DOWNLOAD_SITE@"

  try_again:
    NSISdl::download "$1/$0" "$INSTDIR\$0"

    Pop $1
    StrCmp $1 "Success" success
    StrCmp $1 "Cancelled" cancel
    MessageBox MB_OK "Download failed: $1"
  cancel:
    Return
  success:
FunctionEnd
!endif

;--------------------------------
; Installer Sections

Section -post
  SetDetailsPrint textonly
  DetailPrint "Installing SureFile Files..."
  SetDetailsPrint listonly
  SetOutPath $INSTDIR
  @CPACK_NSIS_FULL_INSTALL@

  SetDetailsPrint textonly
  DetailPrint "Creating start menu items..."
  SetDetailsPrint listonly
  CreateDirectory "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@"
  CreateShortCut "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@\SureFile.lnk" "$INSTDIR\@CPACK_NSIS_INSTALLED_ICON_NAME@"
  CreateShortCut "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@\Uninstall.lnk" "$INSTDIR\Uninstall.exe"
  WriteINIStr "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@\About SureFile.url" "InternetShortcut" "URL" "@CPACK_NSIS_URL_INFO_ABOUT@"
  Push "StartMenu"
  Push "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@"
  Call ConditionalAddToRegisty

  CreateShortCut "$DESKTOP\SureFile.lnk" "$INSTDIR\@CPACK_NSIS_INSTALLED_ICON_NAME@"
  Push "InstallToDesktop"
  Push "$DESKTOP\SureFile.lnk"
  Call ConditionalAddToRegisty

  SetOutPath "$INSTDIR"
  SetDetailsPrint textonly
  DetailPrint "Writing registry entries..."
  SetDetailsPrint listonly

  WriteRegStr SHCTX "Software\${REGISTRY_KEY}" "" $INSTDIR
  WriteRegStr SHCTX "Software\${REGISTRY_KEY}" "Version" "${VERSION}"
  WriteRegStr SHCTX "Software\${REGISTRY_KEY}" "VersionMajor" "${VERSION_MAJOR}"
  WriteRegStr SHCTX "Software\${REGISTRY_KEY}" "VersionMinor" "${VERSION_MINOR}"
  WriteRegStr SHCTX "Software\${REGISTRY_KEY}" "VersionPatch" "${VERSION_PATCH}"

  Push "DisplayName"
  Push "@CPACK_NSIS_DISPLAY_NAME@"
  Call ConditionalAddToRegisty
  Push "DisplayVersion"
  Push "@CPACK_PACKAGE_VERSION@"
  Call ConditionalAddToRegisty
  Push "Publisher"
  Push "@CPACK_PACKAGE_VENDOR@"
  Call ConditionalAddToRegisty
  Push "UninstallString"
  Push "$INSTDIR\Uninstall.exe"
  Call ConditionalAddToRegisty
  Push "NoRepair"
  Push "1"
  Call ConditionalAddToRegisty

  !ifdef CPACK_NSIS_ADD_REMOVE
    Push "ModifyPath"
    Push "$INSTDIR\AddRemove.exe"
    Call ConditionalAddToRegisty
  !else
    Push "NoModify"
    Push "1"
    Call ConditionalAddToRegisty
  !endif

  ; Optional registration
  Push "DisplayIcon"
  Push "$INSTDIR\@CPACK_NSIS_INSTALLED_ICON_NAME@"
  Call ConditionalAddToRegisty
  Push "HelpLink"
  Push "@CPACK_NSIS_HELP_LINK@"
  Call ConditionalAddToRegisty
  Push "URLInfoAbout"
  Push "@CPACK_NSIS_URL_INFO_ABOUT@"
  Call ConditionalAddToRegisty
  Push "Contact"
  Push "@CPACK_NSIS_CONTACT@"
  Call ConditionalAddToRegisty

  SetDetailsPrint textonly
  DetailPrint "Installing filesystem driver..."
  SetDetailsPrint listonly
  Push $0
  nsExec::ExecToStack '"$INSTDIR\cbfs_driver.exe" install @CPACK_NSIS_EXTRA_INSTALL_COMMANDS@'
  Pop $0
  IntCmp $0 0 no_reboot ""
  SetRebootFlag true
  no_reboot:
  Pop $0

  CreateDirectory $APPDATA\Maidsafe\SureFile

  WriteRegStr HKEY_LOCAL_MACHINE "Software\Microsoft\Windows\CurrentVersion\Run" "SureFile" "$INSTDIR\@CPACK_NSIS_INSTALLED_ICON_NAME@"
  
  WriteUninstaller "$INSTDIR\Uninstall.exe"

  SetDetailsPrint both
 
SectionEnd

;--------------------------------
; Uninstaller Section

Function un.GetUserInfo
  ClearErrors
  UserInfo::GetName
  ${If} ${Errors}
    StrCpy $IS_ADMIN 1
    Return
  ${EndIf}

  UserInfo::GetAccountType
  Pop $R0
  ${Switch} $R0
    ${Case} "Admin"
    ${Case} "Power"
      StrCpy $IS_ADMIN 1
      ${Break}
    ${Default}
      StrCpy $IS_ADMIN 0
      ${Break}
  ${EndSwitch}

FunctionEnd

Function un.ReadPreviousVersion

  ReadRegStr $R0 HKLM "Software\${REGISTRY_KEY}" ""

  ${If} $R0 != ""
    ReadRegStr $R2 HKLM "Software\${REGISTRY_KEY}" "Version"
    ${If} $R2 == ""
      StrCpy $R0 ""
    ${EndIf}
  ${EndIf}

  ReadRegStr $R1 HKCU "Software\${REGISTRY_KEY}" ""

  ${If} $R1 != ""
    ReadRegStr $R2 HKCU "Software\${REGISTRY_KEY}" "Version"
    ${If} $R2 == ""
      StrCpy $R1 ""
    ${EndIf}
  ${EndIf}

  ${If} $R1 == $INSTDIR
    Strcpy $un.REMOVE_CURRENT_USER 1
  ${EndIf}
  ${If} $R0 == $INSTDIR
    Strcpy $un.REMOVE_ALL_USERS 1
  ${EndIf}
  ${If} $un.REMOVE_CURRENT_USER != 1
  ${AndIf} $un.REMOVE_ALL_USERS != 1
    ${If} $R1 != ""
      Strcpy $un.REMOVE_CURRENT_USER 1
      ${If} $R0 == $R1
        Strcpy $un.REMOVE_ALL_USERS 1
      ${EndIf}
    ${Else}
      StrCpy $un.REMOVE_ALL_USERS = 1
    ${EndIf}
  ${EndIf}

FunctionEnd

; Returns number of processes * 4 on top of stack, array with all processes right below it.
; Array should be cleared using System::Free
Function un.EnumProcesses

  ; Is this really necesssary for $Rx?
  Push $R1
  Push $R0
  Push $R2
  Push $R3

  ; Double size of array each time EnumProcesses fills it completely so that
  ; we do get all processes

  StrCpy $R1 1024

 enum_processes_loop:

  System::Alloc $R1

  Pop $R0

  System::Call "psapi::EnumProcesses(i R0, i R1, *i .R2) i .R3"

  ${If} $R3 == 0
    ; EnumProcesses failed, how can that be? :P
    goto enum_processes_fail
  ${EndIf}

  ${If} $R1 == $R2

    ; Too small buffer. Retry with twice the size

    Intop $R1 $R1 * 2
    System::Free $R0

    goto enum_processes_loop

  ${EndIf}

  StrCpy $R1 $R2

  ; Restore registers and put results on stack
  Pop $R3
  Pop $R2
  Exch $R0
  Exch
  Exch $R1
  return

 enum_processes_fail:

  Pop $R3
  Pop $R2
  Pop $R0
  Pop $R1

  Push 0
  Push 0

FunctionEnd

; Expects process ID on top of stack, returns filename (in device syntax) on top of stack
Function un.GetFilenameFromProcessId

  Exch $R0
  Push $R1
  Push $R2

  !ifndef PROCESS_QUERY_INFORMATION
  !define PROCESS_QUERY_INFORMATION 0x0400
  !endif
  System::Call "kernel32::OpenProcess(i ${PROCESS_QUERY_INFORMATION}, i 0, i $R0) i .R0"

  ${If} $R0 == 0

    Pop $R2
    Pop $R1
    Pop $R0
    Push ''
    return

  ${EndIf}

  System::Call "psapi::GetProcessImageFileName(i R0, t .R1, i ${NSIS_MAX_STRLEN}) i .R2"

  ${If} $R2 == 0

    System::Call "kernel32::CloseHandle(i R0)"
    Pop $R2
    Pop $R1
    Pop $R0
    Push ''

    return

  ${EndIf}

  System::Call "kernel32::CloseHandle(i R0)"

  Pop $R2
  StrCpy $R0 $R1
  Pop $R1
  Exch $R0

FunctionEnd

; Expects process name on top of stack.
; Gets replaced with 1 if process is running, 0 if it is not
Function un.IsProcessRunning

  Exch $R0 ; Name

  Push $R1 ; Bytes
  Push $R2 ; Array
  Push $R3 ; Counter
  Push $R4 ; Strlen
  Push $R5 ; Current process ID and image filename

  StrCpy $R0 "\$R0"

  StrLen $R4 $R0
  IntOp $R4 0 - $R4

  Call un.EnumProcesses

  Pop $R1
  Pop $R2

  StrCpy $R3 0

  ${While} $R3 < $R1

    IntOp $R5 $R2 + $R3

    System::Call "*$R5(i .R5)"
    Push $R5

    Call un.GetFilenameFromProcessId

    Pop $R5

    ; Get last part of filename
    StrCpy $R5 $R5 '' $R4

    ${If} $R5 == $R0

      ; Program is running
      Pop $R5
      Pop $R4
      Pop $R3
      Pop $R2
      Pop $R1
      Pop $R0
      Push 1
      return

    ${EndIf}

    IntOp $R3 $R3 + 4

  ${EndWhile}

  Pop $R5
  Pop $R4
  Pop $R3
  Pop $R2
  Pop $R1
  Pop $R0
  Push 0

FunctionEnd

Function un.CheckIfRunning

  Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
  Call un.IsProcessRunning
  Pop $R1

  ${If} $REINSTALL_UNINSTALL == 1
    StrCpy $R0 10
  ${Else}
    StrCpy $R0 2
  ${EndIf}

  ${While} $R1 == 1

    ${If} $R0 == 0

      ${ExitWhile}

    ${EndIf}

    Sleep 500

    Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
    Call un.IsProcessRunning
    Pop $R1

    IntOp $R0 $R0 - 1

  ${EndWhile}

  Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
  Call un.IsProcessRunning
  Pop $R1

  ${While} $R1 == 1

    MessageBox MB_RETRYCANCEL|MB_USERICON|MB_DEFBUTTON1 "SureFile appears to be running. Please close all running instances of SureFile before continuing the installation." IDCANCEL cancel IDRETRY retry
    retry:
    Push "@CPACK_NSIS_INSTALLED_ICON_NAME@"
    Call un.IsProcessRunning
    Pop $R1

  ${EndWhile}

  Return

  cancel:
    Quit

FunctionEnd

Function un.onInit

  Call un.GetUserInfo
  Call un.ReadPreviousVersion

  ${If} $un.REMOVE_ALL_USERS == 1
  ${AndIf} $IS_ADMIN == 0
    MessageBox MB_ICONSTOP "SureFile has been installed for all users.$\nPlease restart the uninstaller with Administrator privileges to remove it." /SD IDOK
    Abort
  ${EndIf}

FunctionEnd

Section "Uninstall"

  Call un.CheckIfRunning

  ${If} $un.REMOVE_ALL_USERS == 1
    SetShellVarContext all
  ${EndIf}
  ${If} $un.REMOVE_CURRENT_USER == 1
    SetShellVarContext current
  ${EndIf}

  SetDetailsPrint textonly
  DetailPrint "Uninstalling filesystem driver..."
  SetDetailsPrint listonly
  nsExec::ExecToStack '"$INSTDIR\cbfs_driver.exe" uninstall @CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS@'
  Pop $0
  IntCmp $0 0 no_reboot ""
  SetRebootFlag true
  no_reboot:

  SetDetailsPrint textonly
  DetailPrint "Deleting registry entries..."
  SetDetailsPrint listonly

  ReadRegStr $START_MENU SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_NAME@" "StartMenu"
  ReadRegStr $INSTALL_DESKTOP SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_NAME@" "InstallToDesktop"

  DeleteRegKey SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\@CPACK_PACKAGE_NAME@"
  DeleteRegKey SHCTX "Software\${REGISTRY_KEY}"
  DeleteRegKey SHCTX "Software\@CPACK_PACKAGE_VENDOR@"

  SetDetailsPrint textonly
  DetailPrint "Deleting files..."
  SetDetailsPrint listonly

  @CPACK_NSIS_DELETE_FILES@
  @CPACK_NSIS_DELETE_DIRECTORIES@

  Delete "$INSTDIR\Uninstall.exe"
  RMDir /r "$INSTDIR"
  
  RMDir /r "$APPDATA\@CPACK_PACKAGE_VENDOR@"

  SetDetailsPrint textonly
  DetailPrint "Removing start menu items..."
  SetDetailsPrint listonly

  @CPACK_NSIS_DELETE_ICONS@
  @CPACK_NSIS_DELETE_ICONS_EXTRA@

  Delete "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@\SureFile.lnk"
  Delete "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@\Uninstall.lnk"
  Delete "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@\About SureFile.lnk"
  RMDir /r "$SMPROGRAMS\@CPACK_NSIS_PACKAGE_NAME@"

  Delete "$DESKTOP\SureFile.lnk"

  DeleteRegValue SHCTX "Software\Microsoft\Windows\CurrentVersion\Run" "SureFile"

  SetDetailsPrint both

SectionEnd

Function .onInit

  StrCpy $PREVIOUS_VERSION_STATUS ""

  Call GetUserInfo
  ${If} $IS_ADMIN == 0
    MessageBox MB_ICONSTOP "SureFile cannot be installed.$\nPlease restart the installer with Administrator privileges." /SD IDOK
    Abort
  ${EndIf}

  SetShellVarContext all
  StrCpy $ALL_USERS 1
  Call ReadPreviousVersion

  ${If} $PREVIOUS_VERSION != ""  
	Call CheckIfRunning
	Call CompareVersion
    ${If} $PREVIOUS_VERSION_STATUS == 0
      MessageBox MB_OKCANCEL|MB_USERICON|MB_DEFBUTTON2 "SureFile ${VERSION} is already installed. Click OK to reinstall SureFile or Cancel to stop the installation." IDOK ok IDCANCEL cancel
      cancel:
        Quit
      ok:
    ${ElseIf} $PREVIOUS_VERSION_STATUS == 1
    ${ElseIf} $PREVIOUS_VERSION_STATUS == 2
      MessageBox MB_OK|MB_USERICON|MB_DEFBUTTON1 "A newer version of SureFile is already installed! It is not recommended that you install an older version. If you really want to install this version, please uninstall the current version first."
      Quit
    ${Else}
      Abort
    ${EndIf}
  ${EndIf}

  StrCpy $ALL_USERS_DEFAULT $ALL_USERS
  StrCpy $REINSTALL_UNINSTALL 0

FunctionEnd

Function .onInstSuccess

FunctionEnd